{"ast":null,"code":"var _jsxFileName = \"/Users/administrator/Desktop/react_js/course-project/src/components/Player.js\",\n    _s = $RefreshSig$();\n\nimport \"../style/Player.css\";\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { store } from \"../redux/Store\";\nimport { actionPause, actionPlay, actionPrevTrack, actionNextTrack, actionSetVolume, actionSetDuration, actionSetCurrentTime } from \"../redux/actions/playerActions/playerActions\";\nimport { URL } from \"../Constants\";\nimport { isEmpty } from \"lodash\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport { Typography } from \"@mui/material\";\nimport Slider from \"@mui/material/Slider\";\nimport VolumeDown from \"@mui/icons-material/VolumeDown\";\nimport VolumeUp from \"@mui/icons-material/VolumeUp\";\nimport PauseIcon from \"@mui/icons-material/Pause\";\nimport PlayCircleFilledWhiteIcon from \"@mui/icons-material/PlayCircleFilledWhite\";\nimport SkipPreviousIcon from \"@mui/icons-material/SkipPrevious\";\nimport SkipNextIcon from \"@mui/icons-material/SkipNext\";\nimport Ticker from \"react-ticker\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Player = _ref => {\n  _s();\n\n  let {\n    track = {},\n    tracksFromPlaylist = [],\n    trackCurrentIndex\n  } = _ref;\n  const [currentTrack, setCurrentTrack] = useState({});\n  const [duration, setDuration] = useState(\"00:00\");\n  const [ProgressBarValue, setProgressBarValue] = useState(0);\n  const [currentTime, setCurrentTime] = useState(\"00:00\");\n  const [isPrevButtonDisabled, setPrevButtonDisabled] = useState(false);\n  const [isNextButtonDisabled, setNextButtonDisabled] = useState(false);\n  const [volume, setVolume] = useState(100);\n  let audioRef;\n  let ProgressBarRef;\n  useEffect(() => {\n    if (trackCurrentIndex > -1) {\n      const trackFromPlaylist = tracksFromPlaylist[new Number(trackCurrentIndex)];\n      setCurrentTrack(trackFromPlaylist);\n    }\n  }, [tracksFromPlaylist, trackCurrentIndex]);\n  useEffect(() => {\n    if (!isEmpty(tracksFromPlaylist)) {\n      const index = tracksFromPlaylist.indexOf(currentTrack);\n\n      if (index === 0) {\n        setPrevButtonDisabled(true);\n      } else {\n        setPrevButtonDisabled(false);\n      }\n\n      if (index === tracksFromPlaylist.length - 1) {\n        setNextButtonDisabled(true);\n      } else {\n        setNextButtonDisabled(false);\n      }\n    }\n  }, [tracksFromPlaylist, currentTrack]);\n  useEffect(() => {\n    if (!isEmpty(currentTrack)) {\n      audioRef.src = URL + currentTrack.url;\n      audioRef.play();\n    }\n  }, [currentTrack]);\n\n  const calcTrackLength = s => {\n    const minutes = Math.floor(s / 60);\n    const seconds = Math.floor(s % 60);\n    const returnedSeconds = seconds < 10 ? `0${seconds}` : `${seconds}`;\n    return `${minutes}:${returnedSeconds}`;\n  };\n\n  const onTimeUpdate = () => {\n    setProgressBarValue(Math.floor(audioRef.currentTime));\n    setCurrentTime(calcTrackLength(ProgressBarRef.value));\n    store.dispatch(actionSetCurrentTime(Math.floor(audioRef.currentTime)));\n  };\n\n  const onLoadMetadata = () => {\n    setDuration(calcTrackLength(audioRef.duration));\n    store.dispatch(actionSetDuration(audioRef.duration));\n    setProgressBarMax();\n  };\n\n  const setProgressBarMax = () => {\n    ProgressBarRef.max = Math.floor(audioRef.duration);\n  };\n\n  const onProgressBarInput = () => {\n    setCurrentTime(calcTrackLength(ProgressBarRef.value));\n  };\n\n  const onProgressBarChange = () => {\n    audioRef.currentTime = ProgressBarRef.value;\n  };\n\n  const playAudio = () => {\n    audioRef.play();\n    store.dispatch(actionPlay());\n  };\n\n  const pauseAudio = () => {\n    audioRef.pause();\n    store.dispatch(actionPause());\n  };\n\n  const prevTrack = () => {\n    audioRef.pause();\n    audioRef.removeAttribute(\"src\");\n    store.dispatch(actionPrevTrack());\n  };\n\n  const nextTrack = () => {\n    audioRef.pause();\n    audioRef.removeAttribute(\"src\");\n    store.dispatch(actionNextTrack());\n  };\n\n  const onVolumeChange = event => {\n    const volume = event.target.value;\n    setVolume(volume);\n    audioRef.volume = volume / 100;\n    store.dispatch(actionSetVolume(volume / 100));\n  };\n\n  const toggleMute = event => {\n    const volume = audioRef.volume;\n    volume > 0 ? audioRef.volume = 0 : audioRef.volume = volume;\n  };\n\n  return !isEmpty(currentTrack) ? /*#__PURE__*/_jsxDEV(Box, {\n    className: \"Player\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: e => {\n          ProgressBarRef = e;\n        },\n        onInput: onProgressBarInput,\n        onChange: onProgressBarChange,\n        className: \"Player_progress_bar\",\n        type: \"range\",\n        max: \"100\",\n        value: ProgressBarValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), !isEmpty(currentTrack) ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"audio\", {\n        onTimeUpdate: onTimeUpdate,\n        onLoadedMetadata: onLoadMetadata,\n        ref: e => {\n          audioRef = e;\n        },\n        src: URL + currentTrack.url\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this)\n    }, void 0, false) : \"Please, choose a track\", /*#__PURE__*/_jsxDEV(Box, {\n      className: \"Player_title\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        children: [\" \", currentTime, \" / \", duration.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Ticker, {\n        offset: 5,\n        speed: 5,\n        mode: \"await\",\n        children: () => /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h3\",\n          component: \"span\",\n          className: \"Tittle-name\",\n          children: currentTrack.originalFileName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"Player_buttons\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => prevTrack(),\n        disabled: isPrevButtonDisabled,\n        children: /*#__PURE__*/_jsxDEV(SkipPreviousIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => playAudio(),\n        children: /*#__PURE__*/_jsxDEV(PlayCircleFilledWhiteIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => pauseAudio(),\n        children: /*#__PURE__*/_jsxDEV(PauseIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => nextTrack(),\n        disabled: isNextButtonDisabled,\n        children: /*#__PURE__*/_jsxDEV(SkipNextIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(VolumeDown, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        className: \"Player_volume_slider\",\n        onChange: onVolumeChange,\n        type: \"range\",\n        max: \"100\",\n        value: volume\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(VolumeUp, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: toggleMute,\n        children: \"Mute\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this) : \"\";\n};\n\n_s(Player, \"d1HisXS5SsHkI7JlOPR6+9AmqHY=\");\n\n_c = Player;\nexport const CPlayer = connect(state => {\n  var _state$promise, _state$promise$trackB, _state$player, _state$player$playlis, _state$player2;\n\n  return {\n    track: (_state$promise = state.promise) === null || _state$promise === void 0 ? void 0 : (_state$promise$trackB = _state$promise.trackByID) === null || _state$promise$trackB === void 0 ? void 0 : _state$promise$trackB.payload,\n    tracksFromPlaylist: (_state$player = state.player) === null || _state$player === void 0 ? void 0 : (_state$player$playlis = _state$player.playlist) === null || _state$player$playlis === void 0 ? void 0 : _state$player$playlis.tracks,\n    trackCurrentIndex: (_state$player2 = state.player) === null || _state$player2 === void 0 ? void 0 : _state$player2.trackIndex\n  };\n})(Player);\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["useEffect","useState","connect","store","actionPause","actionPlay","actionPrevTrack","actionNextTrack","actionSetVolume","actionSetDuration","actionSetCurrentTime","URL","isEmpty","Box","Button","Typography","Slider","VolumeDown","VolumeUp","PauseIcon","PlayCircleFilledWhiteIcon","SkipPreviousIcon","SkipNextIcon","Ticker","Player","track","tracksFromPlaylist","trackCurrentIndex","currentTrack","setCurrentTrack","duration","setDuration","ProgressBarValue","setProgressBarValue","currentTime","setCurrentTime","isPrevButtonDisabled","setPrevButtonDisabled","isNextButtonDisabled","setNextButtonDisabled","volume","setVolume","audioRef","ProgressBarRef","trackFromPlaylist","Number","index","indexOf","length","src","url","play","calcTrackLength","s","minutes","Math","floor","seconds","returnedSeconds","onTimeUpdate","value","dispatch","onLoadMetadata","setProgressBarMax","max","onProgressBarInput","onProgressBarChange","playAudio","pauseAudio","pause","prevTrack","removeAttribute","nextTrack","onVolumeChange","event","target","toggleMute","e","toString","originalFileName","CPlayer","state","promise","trackByID","payload","player","playlist","tracks","trackIndex"],"sources":["/Users/administrator/Desktop/react_js/course-project/src/components/Player.js"],"sourcesContent":["import \"../style/Player.css\";\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { store } from \"../redux/Store\";\nimport {\n  actionPause,\n  actionPlay,\n  actionPrevTrack,\n  actionNextTrack,\n  actionSetVolume,\n  actionSetDuration,\n  actionSetCurrentTime,\n} from \"../redux/actions/playerActions/playerActions\";\nimport { URL } from \"../Constants\";\nimport { isEmpty } from \"lodash\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport { Typography } from \"@mui/material\";\nimport Slider from \"@mui/material/Slider\";\nimport VolumeDown from \"@mui/icons-material/VolumeDown\";\nimport VolumeUp from \"@mui/icons-material/VolumeUp\";\nimport PauseIcon from \"@mui/icons-material/Pause\";\nimport PlayCircleFilledWhiteIcon from \"@mui/icons-material/PlayCircleFilledWhite\";\nimport SkipPreviousIcon from \"@mui/icons-material/SkipPrevious\";\nimport SkipNextIcon from \"@mui/icons-material/SkipNext\";\nimport Ticker from \"react-ticker\";\n\nconst Player = ({ track = {}, tracksFromPlaylist = [], trackCurrentIndex }) => {\n  const [currentTrack, setCurrentTrack] = useState({});\n  const [duration, setDuration] = useState(\"00:00\");\n  const [ProgressBarValue, setProgressBarValue] = useState(0);\n  const [currentTime, setCurrentTime] = useState(\"00:00\");\n  const [isPrevButtonDisabled, setPrevButtonDisabled] = useState(false);\n  const [isNextButtonDisabled, setNextButtonDisabled] = useState(false);\n  const [volume, setVolume] = useState(100);\n  let audioRef;\n  let ProgressBarRef;\n\n  useEffect(() => {\n    if (trackCurrentIndex > -1) {\n      const trackFromPlaylist =\n        tracksFromPlaylist[new Number(trackCurrentIndex)];\n      setCurrentTrack(trackFromPlaylist);\n    }\n  }, [tracksFromPlaylist, trackCurrentIndex]);\n\n  useEffect(() => {\n    if (!isEmpty(tracksFromPlaylist)) {\n      const index = tracksFromPlaylist.indexOf(currentTrack);\n      if (index === 0) {\n        setPrevButtonDisabled(true);\n      } else {\n        setPrevButtonDisabled(false);\n      }\n      if (index === tracksFromPlaylist.length - 1) {\n        setNextButtonDisabled(true);\n      } else {\n        setNextButtonDisabled(false);\n      }\n    }\n  }, [tracksFromPlaylist, currentTrack]);\n\n  useEffect(() => {\n    if (!isEmpty(currentTrack)) {\n      audioRef.src = URL + currentTrack.url;\n      audioRef.play();\n    }\n  }, [currentTrack]);\n\n  const calcTrackLength = (s) => {\n    const minutes = Math.floor(s / 60);\n    const seconds = Math.floor(s % 60);\n    const returnedSeconds = seconds < 10 ? `0${seconds}` : `${seconds}`;\n    return `${minutes}:${returnedSeconds}`;\n  };\n\n  const onTimeUpdate = () => {\n    setProgressBarValue(Math.floor(audioRef.currentTime));\n    setCurrentTime(calcTrackLength(ProgressBarRef.value));\n    store.dispatch(actionSetCurrentTime(Math.floor(audioRef.currentTime)));\n  };\n\n  const onLoadMetadata = () => {\n    setDuration(calcTrackLength(audioRef.duration));\n    store.dispatch(actionSetDuration(audioRef.duration));\n    setProgressBarMax();\n  };\n\n  const setProgressBarMax = () => {\n    ProgressBarRef.max = Math.floor(audioRef.duration);\n  };\n\n  const onProgressBarInput = () => {\n    setCurrentTime(calcTrackLength(ProgressBarRef.value));\n  };\n\n  const onProgressBarChange = () => {\n    audioRef.currentTime = ProgressBarRef.value;\n  };\n\n  const playAudio = () => {\n    audioRef.play();\n    store.dispatch(actionPlay());\n  };\n  const pauseAudio = () => {\n    audioRef.pause();\n    store.dispatch(actionPause());\n  };\n  const prevTrack = () => {\n    audioRef.pause();\n    audioRef.removeAttribute(\"src\");\n    store.dispatch(actionPrevTrack());\n  };\n\n  const nextTrack = () => {\n    audioRef.pause();\n    audioRef.removeAttribute(\"src\");\n    store.dispatch(actionNextTrack());\n  };\n\n  const onVolumeChange = (event) => {\n    const volume = event.target.value;\n    setVolume(volume);\n    audioRef.volume = volume / 100;\n    store.dispatch(actionSetVolume(volume / 100));\n  };\n  const toggleMute = (event) => {\n    const volume = audioRef.volume;\n    volume > 0 ? (audioRef.volume = 0) : (audioRef.volume = volume);\n  };\n  return !isEmpty(currentTrack) ? (\n    <Box className=\"Player\">\n      <Box>\n        {\" \"}\n        <input\n          ref={(e) => {\n            ProgressBarRef = e;\n          }}\n          onInput={onProgressBarInput}\n          onChange={onProgressBarChange}\n          className=\"Player_progress_bar\"\n          type=\"range\"\n          max=\"100\"\n          value={ProgressBarValue}\n        />\n      </Box>\n      {!isEmpty(currentTrack) ? (\n        <>\n          <audio\n            onTimeUpdate={onTimeUpdate}\n            onLoadedMetadata={onLoadMetadata}\n            ref={(e) => {\n              audioRef = e;\n            }}\n            src={URL + currentTrack.url}\n          ></audio>\n        </>\n      ) : (\n        \"Please, choose a track\"\n      )}\n      <Box className=\"Player_title\">\n        <Typography>\n          {\" \"}\n          {currentTime} / {duration.toString()}\n        </Typography>\n\n        <Ticker offset={5} speed={5} mode=\"await\">\n          {() => (\n            <Typography variant=\"h3\" component=\"span\" className=\"Tittle-name\">\n              {currentTrack.originalFileName}\n            </Typography>\n          )}\n        </Ticker>\n      </Box>\n\n      <Box className=\"Player_buttons\">\n        <Button onClick={() => prevTrack()} disabled={isPrevButtonDisabled}>\n          <SkipPreviousIcon />\n        </Button>\n        <Button onClick={() => playAudio()}>\n          <PlayCircleFilledWhiteIcon />\n        </Button>\n        <Button onClick={() => pauseAudio()}>\n          <PauseIcon />\n        </Button>\n        <Button onClick={() => nextTrack()} disabled={isNextButtonDisabled}>\n          <SkipNextIcon />\n        </Button>\n        <VolumeDown />\n        <Slider\n          className=\"Player_volume_slider\"\n          onChange={onVolumeChange}\n          type=\"range\"\n          max=\"100\"\n          value={volume}\n        />\n        <VolumeUp />\n        <Button onClick={toggleMute}>Mute</Button>\n      </Box>\n    </Box>\n  ) : (\n    \"\"\n  );\n};\n\nexport const CPlayer = connect((state) => ({\n  track: state.promise?.trackByID?.payload,\n  tracksFromPlaylist: state.player?.playlist?.tracks,\n  trackCurrentIndex: state.player?.trackIndex,\n}))(Player);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
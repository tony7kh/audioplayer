{"ast":null,"code":"var _jsxFileName = \"/Users/administrator/Desktop/audioplayer-project/src/components/Player.js\",\n    _s = $RefreshSig$();\n\nimport \"../style/Player.css\";\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { store } from \"../redux/Store\";\nimport { actionPause, actionPlay, actionPrevTrack, actionNextTrack, actionSetVolume, actionSetDuration, actionSetCurrentTime } from \"../redux/actions/playerActions/playerActions\";\nimport { URL } from \"../Constants\";\nimport { isEmpty } from \"lodash\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport { Typography } from \"@mui/material\";\nimport Slider from \"@mui/material/Slider\";\nimport VolumeDown from \"@mui/icons-material/VolumeDown\";\nimport VolumeUp from \"@mui/icons-material/VolumeUp\";\nimport PauseIcon from \"@mui/icons-material/Pause\";\nimport PlayCircleFilledWhiteIcon from \"@mui/icons-material/PlayCircleFilledWhite\";\nimport SkipPreviousIcon from \"@mui/icons-material/SkipPrevious\";\nimport SkipNextIcon from \"@mui/icons-material/SkipNext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Player = _ref => {\n  _s();\n\n  let {\n    track = {},\n    tracksFromPlaylist = [],\n    trackCurrentIndex\n  } = _ref;\n  const [currentTrack, setCurrentTrack] = useState({});\n  const [duration, setDuration] = useState(\"00:00\");\n  const [ProgressBarValue, setProgressBarValue] = useState(0);\n  const [currentTime, setCurrentTime] = useState(\"00:00\");\n  const [isPrevButtonDisabled, setPrevButtonDisabled] = useState(false);\n  const [isNextButtonDisabled, setNextButtonDisabled] = useState(false);\n  const [volume, setVolume] = useState(100);\n  let myAudio = new Audio(); // let audioRef;\n\n  let ProgressBarRef;\n  useEffect(() => {\n    if (trackCurrentIndex > -1 && trackCurrentIndex !== null) {\n      const trackFromPlaylist = tracksFromPlaylist[Number(trackCurrentIndex)];\n      setCurrentTrack(trackFromPlaylist);\n      console.log(\"track\", trackFromPlaylist);\n    }\n  }, [tracksFromPlaylist, trackCurrentIndex]);\n  useEffect(() => {\n    if (!isEmpty(tracksFromPlaylist)) {\n      const index = tracksFromPlaylist.indexOf(currentTrack);\n\n      if (index === 0) {\n        setPrevButtonDisabled(true);\n      } else {\n        setPrevButtonDisabled(false);\n      }\n\n      if (index === tracksFromPlaylist.length - 1) {\n        setNextButtonDisabled(true);\n      } else {\n        setNextButtonDisabled(false);\n      }\n    }\n  }, [tracksFromPlaylist, currentTrack]);\n  useEffect(() => {\n    if (!isEmpty(currentTrack)) {\n      myAudio.src = URL + currentTrack.url; // myAudio.play();\n\n      console.log(myAudio.currentTime);\n    }\n  }, [currentTrack, myAudio]);\n\n  const calcTrackLength = s => {\n    const minutes = Math.floor(s / 60);\n    const seconds = Math.floor(s % 60);\n    const returnedSeconds = seconds < 10 ? `0${seconds}` : `${seconds}`;\n    return `${minutes}:${returnedSeconds}`;\n  };\n\n  const onTimeUpdate = () => {\n    setProgressBarValue(Math.floor(myAudio.currentTime));\n    setCurrentTime(calcTrackLength(ProgressBarRef.value));\n    store.dispatch(actionSetCurrentTime(Math.floor(myAudio.currentTime)));\n  };\n\n  const onLoadMetadata = () => {\n    setDuration(calcTrackLength(myAudio.duration));\n    store.dispatch(actionSetDuration(myAudio.duration));\n    setProgressBarMax();\n  };\n\n  const setProgressBarMax = () => {\n    ProgressBarRef.max = Math.floor(myAudio.duration);\n  };\n\n  const onProgressBarInput = () => {\n    setCurrentTime(calcTrackLength(ProgressBarRef.value));\n  };\n\n  const onProgressBarChange = () => {\n    myAudio.currentTime = ProgressBarRef.value;\n  };\n\n  const playAudio = () => {\n    myAudio.play();\n    store.dispatch(actionPlay());\n    console.log(myAudio.duration);\n    store.dispatch(actionSetDuration(myAudio.duration));\n  };\n\n  const pauseAudio = () => {\n    console.log(myAudio.paused);\n    store.dispatch(actionPause());\n    console.log(\"я нажимаю на паузу\");\n  };\n\n  const prevTrack = () => {\n    myAudio.pause();\n    myAudio.removeAttribute(\"src\");\n    store.dispatch(actionPrevTrack());\n  };\n\n  const nextTrack = () => {\n    myAudio.pause();\n    myAudio.removeAttribute(\"src\");\n    store.dispatch(actionNextTrack());\n    myAudio.play();\n  };\n\n  const onVolumeChange = event => {\n    const volume = event.target.value;\n    setVolume(volume);\n    myAudio.volume = volume / 100;\n    store.dispatch(actionSetVolume(volume / 100));\n  };\n\n  return !isEmpty(currentTrack) ? /*#__PURE__*/_jsxDEV(Box, {\n    className: \"Player\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: e => {\n          ProgressBarRef = e;\n        },\n        onInput: onProgressBarInput,\n        onChange: onProgressBarChange,\n        className: \"Player_progress_bar\",\n        type: \"range\",\n        max: \"100\",\n        value: ProgressBarValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"Player_title\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        children: [\" \", currentTime, \" / \", duration.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"primary\",\n        variant: \"h6\",\n        component: \"span\",\n        className: \"Tittle-name\",\n        children: currentTrack.originalFileName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"Player_buttons\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => prevTrack(),\n        disabled: isPrevButtonDisabled,\n        children: /*#__PURE__*/_jsxDEV(SkipPreviousIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => playAudio(),\n        children: /*#__PURE__*/_jsxDEV(PlayCircleFilledWhiteIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => pauseAudio(),\n        children: /*#__PURE__*/_jsxDEV(PauseIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => nextTrack(),\n        disabled: isNextButtonDisabled,\n        children: /*#__PURE__*/_jsxDEV(SkipNextIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        className: \"Player__volume-bar\",\n        children: [/*#__PURE__*/_jsxDEV(VolumeDown, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Slider, {\n          className: \"Player_volume_slider\",\n          onChange: onVolumeChange,\n          type: \"range\",\n          max: \"100\",\n          value: volume\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(VolumeUp, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this) : \"\";\n};\n\n_s(Player, \"d1HisXS5SsHkI7JlOPR6+9AmqHY=\");\n\n_c = Player;\nexport const CPlayer = connect(state => {\n  var _state$player, _state$player2, _state$player2$playli, _state$player3;\n\n  return {\n    track: (_state$player = state.player) === null || _state$player === void 0 ? void 0 : _state$player.track,\n    tracksFromPlaylist: (_state$player2 = state.player) === null || _state$player2 === void 0 ? void 0 : (_state$player2$playli = _state$player2.playlist) === null || _state$player2$playli === void 0 ? void 0 : _state$player2$playli.tracks,\n    trackCurrentIndex: (_state$player3 = state.player) === null || _state$player3 === void 0 ? void 0 : _state$player3.trackIndex\n  };\n})(Player);\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["useEffect","useState","connect","store","actionPause","actionPlay","actionPrevTrack","actionNextTrack","actionSetVolume","actionSetDuration","actionSetCurrentTime","URL","isEmpty","Box","Button","Typography","Slider","VolumeDown","VolumeUp","PauseIcon","PlayCircleFilledWhiteIcon","SkipPreviousIcon","SkipNextIcon","Player","track","tracksFromPlaylist","trackCurrentIndex","currentTrack","setCurrentTrack","duration","setDuration","ProgressBarValue","setProgressBarValue","currentTime","setCurrentTime","isPrevButtonDisabled","setPrevButtonDisabled","isNextButtonDisabled","setNextButtonDisabled","volume","setVolume","myAudio","Audio","ProgressBarRef","trackFromPlaylist","Number","console","log","index","indexOf","length","src","url","calcTrackLength","s","minutes","Math","floor","seconds","returnedSeconds","onTimeUpdate","value","dispatch","onLoadMetadata","setProgressBarMax","max","onProgressBarInput","onProgressBarChange","playAudio","play","pauseAudio","paused","prevTrack","pause","removeAttribute","nextTrack","onVolumeChange","event","target","e","toString","originalFileName","CPlayer","state","player","playlist","tracks","trackIndex"],"sources":["/Users/administrator/Desktop/audioplayer-project/src/components/Player.js"],"sourcesContent":["import \"../style/Player.css\";\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { store } from \"../redux/Store\";\nimport {\n  actionPause,\n  actionPlay,\n  actionPrevTrack,\n  actionNextTrack,\n  actionSetVolume,\n  actionSetDuration,\n  actionSetCurrentTime,\n} from \"../redux/actions/playerActions/playerActions\";\nimport { URL } from \"../Constants\";\nimport { isEmpty } from \"lodash\";\n\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport { Typography } from \"@mui/material\";\nimport Slider from \"@mui/material/Slider\";\nimport VolumeDown from \"@mui/icons-material/VolumeDown\";\nimport VolumeUp from \"@mui/icons-material/VolumeUp\";\nimport PauseIcon from \"@mui/icons-material/Pause\";\nimport PlayCircleFilledWhiteIcon from \"@mui/icons-material/PlayCircleFilledWhite\";\nimport SkipPreviousIcon from \"@mui/icons-material/SkipPrevious\";\nimport SkipNextIcon from \"@mui/icons-material/SkipNext\";\n\nconst Player = ({ track = {}, tracksFromPlaylist = [], trackCurrentIndex }) => {\n  const [currentTrack, setCurrentTrack] = useState({});\n  const [duration, setDuration] = useState(\"00:00\");\n  const [ProgressBarValue, setProgressBarValue] = useState(0);\n  const [currentTime, setCurrentTime] = useState(\"00:00\");\n  const [isPrevButtonDisabled, setPrevButtonDisabled] = useState(false);\n  const [isNextButtonDisabled, setNextButtonDisabled] = useState(false);\n  const [volume, setVolume] = useState(100);\n  let myAudio = new Audio();\n  // let audioRef;\n  let ProgressBarRef;\n\n  useEffect(() => {\n    if (trackCurrentIndex > -1 && trackCurrentIndex !== null) {\n      const trackFromPlaylist = tracksFromPlaylist[Number(trackCurrentIndex)];\n      setCurrentTrack(trackFromPlaylist);\n      console.log(\"track\", trackFromPlaylist);\n    }\n  }, [tracksFromPlaylist, trackCurrentIndex]);\n\n  useEffect(() => {\n    if (!isEmpty(tracksFromPlaylist)) {\n      const index = tracksFromPlaylist.indexOf(currentTrack);\n      if (index === 0) {\n        setPrevButtonDisabled(true);\n      } else {\n        setPrevButtonDisabled(false);\n      }\n      if (index === tracksFromPlaylist.length - 1) {\n        setNextButtonDisabled(true);\n      } else {\n        setNextButtonDisabled(false);\n      }\n    }\n  }, [tracksFromPlaylist, currentTrack]);\n\n  useEffect(() => {\n    if (!isEmpty(currentTrack)) {\n      myAudio.src = URL + currentTrack.url;\n      // myAudio.play();\n      console.log(myAudio.currentTime);\n    }\n  }, [currentTrack, myAudio]);\n\n  const calcTrackLength = (s) => {\n    const minutes = Math.floor(s / 60);\n    const seconds = Math.floor(s % 60);\n    const returnedSeconds = seconds < 10 ? `0${seconds}` : `${seconds}`;\n    return `${minutes}:${returnedSeconds}`;\n  };\n\n  const onTimeUpdate = () => {\n    setProgressBarValue(Math.floor(myAudio.currentTime));\n    setCurrentTime(calcTrackLength(ProgressBarRef.value));\n    store.dispatch(actionSetCurrentTime(Math.floor(myAudio.currentTime)));\n  };\n\n  const onLoadMetadata = () => {\n    setDuration(calcTrackLength(myAudio.duration));\n    store.dispatch(actionSetDuration(myAudio.duration));\n    setProgressBarMax();\n  };\n\n  const setProgressBarMax = () => {\n    ProgressBarRef.max = Math.floor(myAudio.duration);\n  };\n\n  const onProgressBarInput = () => {\n    setCurrentTime(calcTrackLength(ProgressBarRef.value));\n  };\n\n  const onProgressBarChange = () => {\n    myAudio.currentTime = ProgressBarRef.value;\n  };\n\n  const playAudio = () => {\n    myAudio.play();\n    store.dispatch(actionPlay());\n    console.log(myAudio.duration);\n    store.dispatch(actionSetDuration(myAudio.duration));\n  };\n  const pauseAudio = () => {\n    console.log(myAudio.paused);\n    store.dispatch(actionPause());\n    console.log(\"я нажимаю на паузу\");\n  };\n  const prevTrack = () => {\n    myAudio.pause();\n    myAudio.removeAttribute(\"src\");\n    store.dispatch(actionPrevTrack());\n  };\n\n  const nextTrack = () => {\n    myAudio.pause();\n    myAudio.removeAttribute(\"src\");\n    store.dispatch(actionNextTrack());\n    myAudio.play();\n  };\n\n  const onVolumeChange = (event) => {\n    const volume = event.target.value;\n    setVolume(volume);\n    myAudio.volume = volume / 100;\n    store.dispatch(actionSetVolume(volume / 100));\n  };\n  return !isEmpty(currentTrack) ? (\n    <Box className=\"Player\">\n      <Box>\n        {\" \"}\n        <input\n          ref={(e) => {\n            ProgressBarRef = e;\n          }}\n          onInput={onProgressBarInput}\n          onChange={onProgressBarChange}\n          className=\"Player_progress_bar\"\n          type=\"range\"\n          max=\"100\"\n          value={ProgressBarValue}\n        />\n      </Box>\n      {/* {!isEmpty(currentTrack) ? (\n        <>\n          <audio\n            onTimeUpdate={onTimeUpdate}\n            onLoadedMetadata={onLoadMetadata}\n            onEnded={nextTrack}\n            ref={(e) => {\n              audioRef = e;\n            }}\n            src={URL + currentTrack.url}\n          ></audio>\n        </>\n      ) : (\n        \"\"\n      )} */}\n      <Box className=\"Player_title\">\n        <Typography>\n          {\" \"}\n          {currentTime} / {duration.toString()}\n        </Typography>\n        <Typography\n          color={\"primary\"}\n          variant=\"h6\"\n          component=\"span\"\n          className=\"Tittle-name\"\n        >\n          {currentTrack.originalFileName}\n        </Typography>\n      </Box>\n\n      <Box className=\"Player_buttons\">\n        <Button onClick={() => prevTrack()} disabled={isPrevButtonDisabled}>\n          <SkipPreviousIcon />\n        </Button>\n        <Button onClick={() => playAudio()}>\n          <PlayCircleFilledWhiteIcon />\n        </Button>\n        <Button onClick={() => pauseAudio()}>\n          <PauseIcon />\n        </Button>\n        <Button onClick={() => nextTrack()} disabled={isNextButtonDisabled}>\n          <SkipNextIcon />\n        </Button>\n        <Box className=\"Player__volume-bar\">\n          <VolumeDown />\n          <Slider\n            className=\"Player_volume_slider\"\n            onChange={onVolumeChange}\n            type=\"range\"\n            max=\"100\"\n            value={volume}\n          />\n          <VolumeUp />\n        </Box>\n      </Box>\n    </Box>\n  ) : (\n    \"\"\n  );\n};\n\nexport const CPlayer = connect((state) => ({\n  track: state.player?.track,\n  tracksFromPlaylist: state.player?.playlist?.tracks,\n  trackCurrentIndex: state.player?.trackIndex,\n}))(Player);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
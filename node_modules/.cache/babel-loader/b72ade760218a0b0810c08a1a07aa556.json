{"ast":null,"code":"var _jsxFileName = \"/Users/administrator/Desktop/react_js/course-project/src/components/Player.js\",\n    _s = $RefreshSig$();\n\nimport \"../style/Player.css\";\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { store } from \"../redux/Store\";\nimport { actionPause, actionPlay, actionPrevTrack, actionNextTrack, actionSetVolume, actionSetDuration, actionSetCurrentTime } from \"../redux/actions/playerActions/playerActions\";\nimport { URL } from \"../Constants\";\nimport { isEmpty } from \"lodash\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport { Typography } from \"@mui/material\";\nimport Slider from \"@mui/material/Slider\";\nimport VolumeDown from \"@mui/icons-material/VolumeDown\";\nimport VolumeUp from \"@mui/icons-material/VolumeUp\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Player = _ref => {\n  _s();\n\n  let {\n    track = {},\n    tracksFromPlaylist = [],\n    trackCurrentIndex\n  } = _ref;\n  const [currentTrack, setCurrentTrack] = useState({});\n  const [duration, setDuration] = useState(\"00:00\");\n  const [ProgressBarValue, setProgressBarValue] = useState(0);\n  const [currentTime, setCurrentTime] = useState(\"00:00\");\n  const [isPrevButtonDisabled, setPrevButtonDisabled] = useState(false);\n  const [isNextButtonDisabled, setNextButtonDisabled] = useState(false);\n  const [volume, setVolume] = useState(100);\n  let audioRef;\n  let ProgressBarRef;\n  useEffect(() => {\n    if (trackCurrentIndex > -1) {\n      console.log(\"\", tracksFromPlaylist);\n      const trackFromPlaylist = tracksFromPlaylist[new Number(trackCurrentIndex)];\n      setCurrentTrack(trackFromPlaylist);\n    }\n  }, [tracksFromPlaylist, trackCurrentIndex]);\n  useEffect(() => {\n    if (!isEmpty(tracksFromPlaylist)) {\n      const index = tracksFromPlaylist.indexOf(currentTrack);\n\n      if (index === 0) {\n        setPrevButtonDisabled(true);\n      } else {\n        setPrevButtonDisabled(false);\n      }\n\n      if (index === tracksFromPlaylist.length - 1) {\n        setNextButtonDisabled(true);\n      } else {\n        setNextButtonDisabled(false);\n      }\n    }\n  }, [tracksFromPlaylist, currentTrack]);\n  useEffect(() => {\n    if (!isEmpty(currentTrack)) {\n      audioRef.src = URL + currentTrack.url;\n      audioRef.play();\n    }\n  }, [currentTrack]);\n\n  const calcTrackLength = s => {\n    const minutes = Math.floor(s / 60);\n    const seconds = Math.floor(s % 60);\n    const returnedSeconds = seconds < 10 ? `0${seconds}` : `${seconds}`;\n    return `${minutes}:${returnedSeconds}`;\n  };\n\n  const onTimeUpdate = () => {\n    setProgressBarValue(Math.floor(audioRef.currentTime));\n    setCurrentTime(calcTrackLength(ProgressBarRef.value));\n    store.dispatch(actionSetCurrentTime(Math.floor(audioRef.currentTime)));\n  };\n\n  const onLoadMetadata = () => {\n    setDuration(calcTrackLength(audioRef.duration));\n    store.dispatch(actionSetDuration(audioRef.duration));\n    setProgressBarMax();\n  };\n\n  const setProgressBarMax = () => {\n    ProgressBarRef.max = Math.floor(audioRef.duration);\n  };\n\n  const onProgressBarInput = () => {\n    setCurrentTime(calcTrackLength(ProgressBarRef.value));\n  };\n\n  const onProgressBarChange = () => {\n    audioRef.currentTime = ProgressBarRef.value;\n  };\n\n  const playAudio = () => {\n    audioRef.play();\n    store.dispatch(actionPlay());\n  };\n\n  const pauseAudio = () => {\n    audioRef.pause();\n    store.dispatch(actionPause());\n  };\n\n  const prevTrack = () => {\n    audioRef.pause();\n    audioRef.removeAttribute(\"src\");\n    store.dispatch(actionPrevTrack());\n  };\n\n  const nextTrack = () => {\n    audioRef.pause();\n    audioRef.removeAttribute(\"src\");\n    store.dispatch(actionNextTrack());\n  };\n\n  const onVolumeChange = event => {\n    const volume = event.target.value;\n    setVolume(volume);\n    audioRef.volume = volume / 100;\n    store.dispatch(actionSetVolume(volume / 100));\n  };\n\n  const toggleMute = event => {\n    const volume = audioRef.volume;\n    volume > 0 ? audioRef.volume = 0 : audioRef.volume = volume;\n  };\n\n  return !isEmpty(currentTrack) ? /*#__PURE__*/_jsxDEV(Box, {\n    className: \"Player\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: e => {\n          ProgressBarRef = e;\n        },\n        onInput: onProgressBarInput,\n        onChange: onProgressBarChange,\n        className: \"Player_progress_bar\",\n        type: \"range\",\n        max: \"100\",\n        value: ProgressBarValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), !isEmpty(currentTrack) ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"audio\", {\n        onTimeUpdate: onTimeUpdate,\n        onLoadedMetadata: onLoadMetadata,\n        ref: e => {\n          audioRef = e;\n        },\n        src: URL + currentTrack.url\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this)\n    }, void 0, false) : \"Please, choose a track\", /*#__PURE__*/_jsxDEV(Box, {\n      className: \"Player_title\",\n      children: [currentTime, \" / \", duration.toString(), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        component: \"div\",\n        children: currentTrack.originalFileName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"Player_buttons\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => prevTrack(),\n        disabled: isPrevButtonDisabled,\n        children: \"PrevTrack\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => playAudio(),\n        children: \"Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => pauseAudio(),\n        children: \"Pause\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => nextTrack(),\n        disabled: isNextButtonDisabled,\n        children: \"NextTrack\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(VolumeDown, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        className: \"Player_volume_slider\",\n        onChange: onVolumeChange,\n        type: \"range\",\n        max: \"100\",\n        value: volume\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(VolumeUp, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: toggleMute,\n        children: \"Mute\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this) : \"\";\n};\n\n_s(Player, \"d1HisXS5SsHkI7JlOPR6+9AmqHY=\");\n\n_c = Player;\nexport const CPlayer = connect(state => {\n  var _state$promise, _state$promise$trackB, _state$promise2, _state$promise2$track, _state$promise2$track2, _state$player;\n\n  return {\n    track: (_state$promise = state.promise) === null || _state$promise === void 0 ? void 0 : (_state$promise$trackB = _state$promise.trackByID) === null || _state$promise$trackB === void 0 ? void 0 : _state$promise$trackB.payload,\n    tracksFromPlaylist: (_state$promise2 = state.promise) === null || _state$promise2 === void 0 ? void 0 : (_state$promise2$track = _state$promise2.tracksFromPlaylist) === null || _state$promise2$track === void 0 ? void 0 : (_state$promise2$track2 = _state$promise2$track.payload) === null || _state$promise2$track2 === void 0 ? void 0 : _state$promise2$track2.tracks,\n    trackCurrentIndex: (_state$player = state.player) === null || _state$player === void 0 ? void 0 : _state$player.trackIndex\n  };\n})(Player);\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["useEffect","useState","connect","store","actionPause","actionPlay","actionPrevTrack","actionNextTrack","actionSetVolume","actionSetDuration","actionSetCurrentTime","URL","isEmpty","Box","Button","Typography","Slider","VolumeDown","VolumeUp","Player","track","tracksFromPlaylist","trackCurrentIndex","currentTrack","setCurrentTrack","duration","setDuration","ProgressBarValue","setProgressBarValue","currentTime","setCurrentTime","isPrevButtonDisabled","setPrevButtonDisabled","isNextButtonDisabled","setNextButtonDisabled","volume","setVolume","audioRef","ProgressBarRef","console","log","trackFromPlaylist","Number","index","indexOf","length","src","url","play","calcTrackLength","s","minutes","Math","floor","seconds","returnedSeconds","onTimeUpdate","value","dispatch","onLoadMetadata","setProgressBarMax","max","onProgressBarInput","onProgressBarChange","playAudio","pauseAudio","pause","prevTrack","removeAttribute","nextTrack","onVolumeChange","event","target","toggleMute","e","toString","originalFileName","CPlayer","state","promise","trackByID","payload","tracks","player","trackIndex"],"sources":["/Users/administrator/Desktop/react_js/course-project/src/components/Player.js"],"sourcesContent":["import \"../style/Player.css\";\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { store } from \"../redux/Store\";\nimport {\n  actionPause,\n  actionPlay,\n  actionPrevTrack,\n  actionNextTrack,\n  actionSetVolume,\n  actionSetDuration,\n  actionSetCurrentTime,\n} from \"../redux/actions/playerActions/playerActions\";\nimport { URL } from \"../Constants\";\nimport { isEmpty } from \"lodash\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport { Typography } from \"@mui/material\";\nimport Slider from \"@mui/material/Slider\";\nimport VolumeDown from \"@mui/icons-material/VolumeDown\";\nimport VolumeUp from \"@mui/icons-material/VolumeUp\";\n\nconst Player = ({ track = {}, tracksFromPlaylist = [], trackCurrentIndex }) => {\n  const [currentTrack, setCurrentTrack] = useState({});\n  const [duration, setDuration] = useState(\"00:00\");\n  const [ProgressBarValue, setProgressBarValue] = useState(0);\n  const [currentTime, setCurrentTime] = useState(\"00:00\");\n  const [isPrevButtonDisabled, setPrevButtonDisabled] = useState(false);\n  const [isNextButtonDisabled, setNextButtonDisabled] = useState(false);\n  const [volume, setVolume] = useState(100);\n  let audioRef;\n  let ProgressBarRef;\n\n  useEffect(() => {\n    if (trackCurrentIndex > -1) {\n      console.log(\"\",tracksFromPlaylist);\n      const trackFromPlaylist =\n        tracksFromPlaylist[new Number(trackCurrentIndex)];\n      setCurrentTrack(trackFromPlaylist);\n    }\n  }, [tracksFromPlaylist, trackCurrentIndex]);\n\n  useEffect(() => {\n    if (!isEmpty(tracksFromPlaylist)) {\n      const index = tracksFromPlaylist.indexOf(currentTrack);\n      if (index === 0) {\n        setPrevButtonDisabled(true);\n      } else {\n        setPrevButtonDisabled(false);\n      }\n      if (index === tracksFromPlaylist.length - 1) {\n        setNextButtonDisabled(true);\n      } else {\n        setNextButtonDisabled(false);\n      }\n    }\n  }, [tracksFromPlaylist, currentTrack]);\n\n  useEffect(() => {\n    if (!isEmpty(currentTrack)) {\n      audioRef.src = URL + currentTrack.url;\n      audioRef.play();\n    }\n  }, [currentTrack]);\n\n  const calcTrackLength = (s) => {\n    const minutes = Math.floor(s / 60);\n    const seconds = Math.floor(s % 60);\n    const returnedSeconds = seconds < 10 ? `0${seconds}` : `${seconds}`;\n    return `${minutes}:${returnedSeconds}`;\n  };\n\n  const onTimeUpdate = () => {\n    setProgressBarValue(Math.floor(audioRef.currentTime));\n    setCurrentTime(calcTrackLength(ProgressBarRef.value));\n    store.dispatch(actionSetCurrentTime(Math.floor(audioRef.currentTime)));\n  };\n\n  const onLoadMetadata = () => {\n    setDuration(calcTrackLength(audioRef.duration));\n    store.dispatch(actionSetDuration(audioRef.duration));\n    setProgressBarMax();\n  };\n\n  const setProgressBarMax = () => {\n    ProgressBarRef.max = Math.floor(audioRef.duration);\n  };\n\n  const onProgressBarInput = () => {\n    setCurrentTime(calcTrackLength(ProgressBarRef.value));\n  };\n\n  const onProgressBarChange = () => {\n    audioRef.currentTime = ProgressBarRef.value;\n  };\n\n  const playAudio = () => {\n    audioRef.play();\n    store.dispatch(actionPlay());\n  };\n  const pauseAudio = () => {\n    audioRef.pause();\n    store.dispatch(actionPause());\n  };\n  const prevTrack = () => {\n    audioRef.pause();\n    audioRef.removeAttribute(\"src\");\n    store.dispatch(actionPrevTrack());\n  };\n\n  const nextTrack = () => {\n    audioRef.pause();\n    audioRef.removeAttribute(\"src\");\n    store.dispatch(actionNextTrack());\n  };\n\n  const onVolumeChange = (event) => {\n    const volume = event.target.value;\n    setVolume(volume);\n    audioRef.volume = volume / 100;\n    store.dispatch(actionSetVolume(volume / 100));\n  };\n  const toggleMute = (event) => {\n    const volume = audioRef.volume;\n    volume > 0 ? (audioRef.volume = 0) : (audioRef.volume = volume);\n  };\n  return !isEmpty(currentTrack) ? (\n    <Box className=\"Player\">\n      <Box>\n        {\" \"}\n        <input\n          ref={(e) => {\n            ProgressBarRef = e;\n          }}\n          onInput={onProgressBarInput}\n          onChange={onProgressBarChange}\n          className=\"Player_progress_bar\"\n          type=\"range\"\n          max=\"100\"\n          value={ProgressBarValue}\n        />\n      </Box>\n      {!isEmpty(currentTrack) ? (\n        <>\n          <audio\n            onTimeUpdate={onTimeUpdate}\n            onLoadedMetadata={onLoadMetadata}\n            ref={(e) => {\n              audioRef = e;\n            }}\n            src={URL + currentTrack.url}\n          ></audio>\n        </>\n      ) : (\n        \"Please, choose a track\"\n      )}\n      <Box className=\"Player_title\">\n        {currentTime} / {duration.toString()}\n        <Typography variant=\"h3\" component=\"div\">\n          {currentTrack.originalFileName}\n        </Typography>\n      </Box>\n\n      <Box className=\"Player_buttons\">\n        <Button onClick={() => prevTrack()} disabled={isPrevButtonDisabled}>\n          PrevTrack\n        </Button>\n        <Button onClick={() => playAudio()}>Play</Button>\n        <Button onClick={() => pauseAudio()}>Pause</Button>\n        <Button onClick={() => nextTrack()} disabled={isNextButtonDisabled}>\n          NextTrack\n        </Button>\n        <VolumeDown />\n        <Slider\n          className=\"Player_volume_slider\"\n          onChange={onVolumeChange}\n          type=\"range\"\n          max=\"100\"\n          value={volume}\n        />\n        <VolumeUp />\n        <Button onClick={toggleMute}>Mute</Button>\n      </Box>\n    </Box>\n  ) : (\n    \"\"\n  );\n};\n\nexport const CPlayer = connect((state) => ({\n  track: state.promise?.trackByID?.payload,\n  tracksFromPlaylist: state.promise?.tracksFromPlaylist?.payload?.tracks,\n  trackCurrentIndex: state.player?.trackIndex,\n}))(Player);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
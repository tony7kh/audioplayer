{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport \"../style/Player.css\";\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { store } from \"../redux/Store\";\nimport { actionPause, actionPlay, actionPrevTrack, actionNextTrack, actionSetVolume } from \"../redux/actions/playerActions/playerActions\";\nimport { URL } from \"../Constants\";\nimport { isEmpty } from \"lodash\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport { Typography } from \"@mui/material\";\nimport Slider from \"@mui/material/Slider\";\nimport VolumeDown from \"@mui/icons-material/VolumeDown\";\nimport VolumeUp from \"@mui/icons-material/VolumeUp\";\n\nconst Player = _ref => {\n  _s();\n\n  let {\n    track = {},\n    tracksFromPlaylist = [],\n    trackCurrentIndex\n  } = _ref;\n  const [currentTrack, setCurrentTrack] = useState({});\n  const [duration, setDuration] = useState(\"00:00\");\n  const [sliderValue, setSliderValue] = useState(0);\n  const [currentTime, setCurrentTime] = useState(\"00:00\");\n  const [isPrevButtonDisabled, setPrevButtonDisabled] = useState(false);\n  const [isNextButtonDisabled, setNextButtonDisabled] = useState(false);\n  const [volume, setVolume] = useState(100);\n  let audioRef;\n  let sliderRef;\n  useEffect(() => {\n    if (trackCurrentIndex > -1) {\n      const trackFromPlaylist = tracksFromPlaylist[new Number(trackCurrentIndex)];\n      setCurrentTrack(trackFromPlaylist);\n    }\n  }, [tracksFromPlaylist, trackCurrentIndex]);\n  useEffect(() => {\n    if (!isEmpty(tracksFromPlaylist)) {\n      const index = tracksFromPlaylist.indexOf(currentTrack);\n\n      if (index === 0) {\n        setPrevButtonDisabled(true);\n      } else {\n        setPrevButtonDisabled(false);\n      }\n\n      if (index === tracksFromPlaylist.length - 1) {\n        setNextButtonDisabled(true);\n      } else {\n        setNextButtonDisabled(false);\n      }\n    }\n  }, [tracksFromPlaylist, currentTrack]);\n  useEffect(() => {\n    if (!isEmpty(currentTrack)) {\n      audioRef.src = URL + currentTrack.url;\n      audioRef.play();\n    }\n  }, [currentTrack]);\n\n  const calcTrackLength = s => {\n    const minutes = Math.floor(s / 60);\n    const seconds = Math.floor(s % 60);\n    const returnedSeconds = seconds < 10 ? `0${seconds}` : `${seconds}`;\n    return `${minutes}:${returnedSeconds}`;\n  };\n\n  const onTimeUpdate = () => {\n    setSliderValue(Math.floor(audioRef.currentTime));\n    setCurrentTime(calcTrackLength(sliderRef.value));\n  };\n\n  const onLoadMetadata = () => {\n    setDuration(calcTrackLength(audioRef.duration));\n    setSliderMax();\n  };\n\n  const setSliderMax = () => {\n    sliderRef.max = Math.floor(audioRef.duration);\n  };\n\n  const onSliderInput = () => {\n    setCurrentTime(calcTrackLength(sliderRef.value));\n  };\n\n  const onSliderChange = () => {\n    audioRef.currentTime = sliderRef.value;\n  };\n\n  const playAudio = () => {\n    audioRef.play();\n    store.dispatch(actionPlay());\n  };\n\n  const pauseAudio = () => {\n    audioRef.pause();\n    store.dispatch(actionPause());\n  };\n\n  const prevTrack = () => {\n    audioRef.pause();\n    audioRef.removeAttribute(\"src\");\n    store.dispatch(actionPrevTrack());\n  };\n\n  const nextTrack = () => {\n    audioRef.pause();\n    audioRef.removeAttribute(\"src\");\n    store.dispatch(actionNextTrack());\n  };\n\n  const onVolumeChange = event => {\n    const volume = event.target.value;\n    setVolume(volume);\n    audioRef.volume = volume / 100;\n    store.dispatch(actionSetVolume(volume));\n  };\n\n  const toggleMute = event => {\n    const volume = audioRef.volume;\n    volume > 0 ? audioRef.volume = 0 : audioRef.volume = volume;\n  };\n\n  return !isEmpty(c);\n};\n\n_s(Player, \"nM8+vvlYulrONrHJOUGy7Cyh+Ok=\");\n\n_c = Player;\nexport const CPlayer = connect(state => {\n  var _state$promise, _state$promise$trackB, _state$promise2, _state$promise2$track, _state$promise2$track2, _state$player;\n\n  return {\n    track: (_state$promise = state.promise) === null || _state$promise === void 0 ? void 0 : (_state$promise$trackB = _state$promise.trackByID) === null || _state$promise$trackB === void 0 ? void 0 : _state$promise$trackB.payload,\n    tracksFromPlaylist: (_state$promise2 = state.promise) === null || _state$promise2 === void 0 ? void 0 : (_state$promise2$track = _state$promise2.tracksFromPlaylist) === null || _state$promise2$track === void 0 ? void 0 : (_state$promise2$track2 = _state$promise2$track.payload) === null || _state$promise2$track2 === void 0 ? void 0 : _state$promise2$track2.tracks,\n    trackCurrentIndex: (_state$player = state.player) === null || _state$player === void 0 ? void 0 : _state$player.trackIndex\n  };\n})(Player);\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["useEffect","useState","connect","store","actionPause","actionPlay","actionPrevTrack","actionNextTrack","actionSetVolume","URL","isEmpty","Box","Button","Typography","Slider","VolumeDown","VolumeUp","Player","track","tracksFromPlaylist","trackCurrentIndex","currentTrack","setCurrentTrack","duration","setDuration","sliderValue","setSliderValue","currentTime","setCurrentTime","isPrevButtonDisabled","setPrevButtonDisabled","isNextButtonDisabled","setNextButtonDisabled","volume","setVolume","audioRef","sliderRef","trackFromPlaylist","Number","index","indexOf","length","src","url","play","calcTrackLength","s","minutes","Math","floor","seconds","returnedSeconds","onTimeUpdate","value","onLoadMetadata","setSliderMax","max","onSliderInput","onSliderChange","playAudio","dispatch","pauseAudio","pause","prevTrack","removeAttribute","nextTrack","onVolumeChange","event","target","toggleMute","c","CPlayer","state","promise","trackByID","payload","tracks","player","trackIndex"],"sources":["/Users/administrator/Desktop/react_js/course-project/src/components/Player.js"],"sourcesContent":["import \"../style/Player.css\";\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { store } from \"../redux/Store\";\nimport {\n  actionPause,\n  actionPlay,\n  actionPrevTrack,\n  actionNextTrack,\n  actionSetVolume,\n} from \"../redux/actions/playerActions/playerActions\";\nimport { URL } from \"../Constants\";\nimport { isEmpty } from \"lodash\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport { Typography } from \"@mui/material\";\nimport Slider from \"@mui/material/Slider\";\nimport VolumeDown from \"@mui/icons-material/VolumeDown\";\nimport VolumeUp from \"@mui/icons-material/VolumeUp\";\n\nconst Player = ({ track = {}, tracksFromPlaylist = [], trackCurrentIndex }) => {\n  const [currentTrack, setCurrentTrack] = useState({});\n  const [duration, setDuration] = useState(\"00:00\");\n  const [sliderValue, setSliderValue] = useState(0);\n  const [currentTime, setCurrentTime] = useState(\"00:00\");\n  const [isPrevButtonDisabled, setPrevButtonDisabled] = useState(false);\n  const [isNextButtonDisabled, setNextButtonDisabled] = useState(false);\n  const [volume, setVolume] = useState(100);\n  let audioRef;\n  let sliderRef;\n\n  useEffect(() => {\n    if (trackCurrentIndex > -1) {\n      const trackFromPlaylist =\n        tracksFromPlaylist[new Number(trackCurrentIndex)];\n      setCurrentTrack(trackFromPlaylist);\n    }\n  }, [tracksFromPlaylist, trackCurrentIndex]);\n\n  useEffect(() => {\n    if (!isEmpty(tracksFromPlaylist)) {\n      const index = tracksFromPlaylist.indexOf(currentTrack);\n      if (index === 0) {\n        setPrevButtonDisabled(true);\n      } else {\n        setPrevButtonDisabled(false);\n      }\n      if (index === tracksFromPlaylist.length - 1) {\n        setNextButtonDisabled(true);\n      } else {\n        setNextButtonDisabled(false);\n      }\n    }\n  }, [tracksFromPlaylist, currentTrack]);\n\n  useEffect(() => {\n    if (!isEmpty(currentTrack)) {\n      audioRef.src = URL + currentTrack.url;\n      audioRef.play();\n    }\n  }, [currentTrack]);\n\n  const calcTrackLength = (s) => {\n    const minutes = Math.floor(s / 60);\n    const seconds = Math.floor(s % 60);\n    const returnedSeconds = seconds < 10 ? `0${seconds}` : `${seconds}`;\n    return `${minutes}:${returnedSeconds}`;\n  };\n\n  const onTimeUpdate = () => {\n    setSliderValue(Math.floor(audioRef.currentTime));\n    setCurrentTime(calcTrackLength(sliderRef.value));\n  };\n\n  const onLoadMetadata = () => {\n    setDuration(calcTrackLength(audioRef.duration));\n    setSliderMax();\n  };\n\n  const setSliderMax = () => {\n    sliderRef.max = Math.floor(audioRef.duration);\n  };\n\n  const onSliderInput = () => {\n    setCurrentTime(calcTrackLength(sliderRef.value));\n  };\n\n  const onSliderChange = () => {\n    audioRef.currentTime = sliderRef.value;\n  };\n\n  const playAudio = () => {\n    audioRef.play();\n    store.dispatch(actionPlay());\n  };\n  const pauseAudio = () => {\n    audioRef.pause();\n    store.dispatch(actionPause());\n  };\n  const prevTrack = () => {\n    audioRef.pause();\n    audioRef.removeAttribute(\"src\");\n    store.dispatch(actionPrevTrack());\n  };\n\n  const nextTrack = () => {\n    audioRef.pause();\n    audioRef.removeAttribute(\"src\");\n    store.dispatch(actionNextTrack());\n  };\n\n  const onVolumeChange = (event) => {\n    const volume = event.target.value;\n    setVolume(volume);\n    audioRef.volume = volume / 100;\n    store.dispatch(actionSetVolume(volume));\n  };\n  const toggleMute = (event) => {\n    const volume = audioRef.volume;\n    volume > 0 ? (audioRef.volume = 0) : (audioRef.volume = volume);\n  };\n  return (\n    !isEmpty(c)\n    \n  );\n};\n\nexport const CPlayer = connect((state) => ({\n  track: state.promise?.trackByID?.payload,\n  tracksFromPlaylist: state.promise?.tracksFromPlaylist?.payload?.tracks,\n  trackCurrentIndex: state.player?.trackIndex,\n}))(Player);\n"],"mappings":";;AAAA,OAAO,qBAAP;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SACEC,WADF,EAEEC,UAFF,EAGEC,eAHF,EAIEC,eAJF,EAKEC,eALF,QAMO,8CANP;AAOA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,OAAOC,QAAP,MAAqB,8BAArB;;AAEA,MAAMC,MAAM,GAAG,QAAgE;EAAA;;EAAA,IAA/D;IAAEC,KAAK,GAAG,EAAV;IAAcC,kBAAkB,GAAG,EAAnC;IAAuCC;EAAvC,CAA+D;EAC7E,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCrB,QAAQ,CAAC,EAAD,CAAhD;EACA,MAAM,CAACsB,QAAD,EAAWC,WAAX,IAA0BvB,QAAQ,CAAC,OAAD,CAAxC;EACA,MAAM,CAACwB,WAAD,EAAcC,cAAd,IAAgCzB,QAAQ,CAAC,CAAD,CAA9C;EACA,MAAM,CAAC0B,WAAD,EAAcC,cAAd,IAAgC3B,QAAQ,CAAC,OAAD,CAA9C;EACA,MAAM,CAAC4B,oBAAD,EAAuBC,qBAAvB,IAAgD7B,QAAQ,CAAC,KAAD,CAA9D;EACA,MAAM,CAAC8B,oBAAD,EAAuBC,qBAAvB,IAAgD/B,QAAQ,CAAC,KAAD,CAA9D;EACA,MAAM,CAACgC,MAAD,EAASC,SAAT,IAAsBjC,QAAQ,CAAC,GAAD,CAApC;EACA,IAAIkC,QAAJ;EACA,IAAIC,SAAJ;EAEApC,SAAS,CAAC,MAAM;IACd,IAAIoB,iBAAiB,GAAG,CAAC,CAAzB,EAA4B;MAC1B,MAAMiB,iBAAiB,GACrBlB,kBAAkB,CAAC,IAAImB,MAAJ,CAAWlB,iBAAX,CAAD,CADpB;MAEAE,eAAe,CAACe,iBAAD,CAAf;IACD;EACF,CANQ,EAMN,CAAClB,kBAAD,EAAqBC,iBAArB,CANM,CAAT;EAQApB,SAAS,CAAC,MAAM;IACd,IAAI,CAACU,OAAO,CAACS,kBAAD,CAAZ,EAAkC;MAChC,MAAMoB,KAAK,GAAGpB,kBAAkB,CAACqB,OAAnB,CAA2BnB,YAA3B,CAAd;;MACA,IAAIkB,KAAK,KAAK,CAAd,EAAiB;QACfT,qBAAqB,CAAC,IAAD,CAArB;MACD,CAFD,MAEO;QACLA,qBAAqB,CAAC,KAAD,CAArB;MACD;;MACD,IAAIS,KAAK,KAAKpB,kBAAkB,CAACsB,MAAnB,GAA4B,CAA1C,EAA6C;QAC3CT,qBAAqB,CAAC,IAAD,CAArB;MACD,CAFD,MAEO;QACLA,qBAAqB,CAAC,KAAD,CAArB;MACD;IACF;EACF,CAdQ,EAcN,CAACb,kBAAD,EAAqBE,YAArB,CAdM,CAAT;EAgBArB,SAAS,CAAC,MAAM;IACd,IAAI,CAACU,OAAO,CAACW,YAAD,CAAZ,EAA4B;MAC1Bc,QAAQ,CAACO,GAAT,GAAejC,GAAG,GAAGY,YAAY,CAACsB,GAAlC;MACAR,QAAQ,CAACS,IAAT;IACD;EACF,CALQ,EAKN,CAACvB,YAAD,CALM,CAAT;;EAOA,MAAMwB,eAAe,GAAIC,CAAD,IAAO;IAC7B,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAC,GAAG,EAAf,CAAhB;IACA,MAAMI,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAWH,CAAC,GAAG,EAAf,CAAhB;IACA,MAAMK,eAAe,GAAGD,OAAO,GAAG,EAAV,GAAgB,IAAGA,OAAQ,EAA3B,GAAgC,GAAEA,OAAQ,EAAlE;IACA,OAAQ,GAAEH,OAAQ,IAAGI,eAAgB,EAArC;EACD,CALD;;EAOA,MAAMC,YAAY,GAAG,MAAM;IACzB1B,cAAc,CAACsB,IAAI,CAACC,KAAL,CAAWd,QAAQ,CAACR,WAApB,CAAD,CAAd;IACAC,cAAc,CAACiB,eAAe,CAACT,SAAS,CAACiB,KAAX,CAAhB,CAAd;EACD,CAHD;;EAKA,MAAMC,cAAc,GAAG,MAAM;IAC3B9B,WAAW,CAACqB,eAAe,CAACV,QAAQ,CAACZ,QAAV,CAAhB,CAAX;IACAgC,YAAY;EACb,CAHD;;EAKA,MAAMA,YAAY,GAAG,MAAM;IACzBnB,SAAS,CAACoB,GAAV,GAAgBR,IAAI,CAACC,KAAL,CAAWd,QAAQ,CAACZ,QAApB,CAAhB;EACD,CAFD;;EAIA,MAAMkC,aAAa,GAAG,MAAM;IAC1B7B,cAAc,CAACiB,eAAe,CAACT,SAAS,CAACiB,KAAX,CAAhB,CAAd;EACD,CAFD;;EAIA,MAAMK,cAAc,GAAG,MAAM;IAC3BvB,QAAQ,CAACR,WAAT,GAAuBS,SAAS,CAACiB,KAAjC;EACD,CAFD;;EAIA,MAAMM,SAAS,GAAG,MAAM;IACtBxB,QAAQ,CAACS,IAAT;IACAzC,KAAK,CAACyD,QAAN,CAAevD,UAAU,EAAzB;EACD,CAHD;;EAIA,MAAMwD,UAAU,GAAG,MAAM;IACvB1B,QAAQ,CAAC2B,KAAT;IACA3D,KAAK,CAACyD,QAAN,CAAexD,WAAW,EAA1B;EACD,CAHD;;EAIA,MAAM2D,SAAS,GAAG,MAAM;IACtB5B,QAAQ,CAAC2B,KAAT;IACA3B,QAAQ,CAAC6B,eAAT,CAAyB,KAAzB;IACA7D,KAAK,CAACyD,QAAN,CAAetD,eAAe,EAA9B;EACD,CAJD;;EAMA,MAAM2D,SAAS,GAAG,MAAM;IACtB9B,QAAQ,CAAC2B,KAAT;IACA3B,QAAQ,CAAC6B,eAAT,CAAyB,KAAzB;IACA7D,KAAK,CAACyD,QAAN,CAAerD,eAAe,EAA9B;EACD,CAJD;;EAMA,MAAM2D,cAAc,GAAIC,KAAD,IAAW;IAChC,MAAMlC,MAAM,GAAGkC,KAAK,CAACC,MAAN,CAAaf,KAA5B;IACAnB,SAAS,CAACD,MAAD,CAAT;IACAE,QAAQ,CAACF,MAAT,GAAkBA,MAAM,GAAG,GAA3B;IACA9B,KAAK,CAACyD,QAAN,CAAepD,eAAe,CAACyB,MAAD,CAA9B;EACD,CALD;;EAMA,MAAMoC,UAAU,GAAIF,KAAD,IAAW;IAC5B,MAAMlC,MAAM,GAAGE,QAAQ,CAACF,MAAxB;IACAA,MAAM,GAAG,CAAT,GAAcE,QAAQ,CAACF,MAAT,GAAkB,CAAhC,GAAsCE,QAAQ,CAACF,MAAT,GAAkBA,MAAxD;EACD,CAHD;;EAIA,OACE,CAACvB,OAAO,CAAC4D,CAAD,CADV;AAID,CAzGD;;GAAMrD,M;;KAAAA,M;AA2GN,OAAO,MAAMsD,OAAO,GAAGrE,OAAO,CAAEsE,KAAD;EAAA;;EAAA,OAAY;IACzCtD,KAAK,oBAAEsD,KAAK,CAACC,OAAR,4EAAE,eAAeC,SAAjB,0DAAE,sBAA0BC,OADQ;IAEzCxD,kBAAkB,qBAAEqD,KAAK,CAACC,OAAR,6EAAE,gBAAetD,kBAAjB,oFAAE,sBAAmCwD,OAArC,2DAAE,uBAA4CC,MAFvB;IAGzCxD,iBAAiB,mBAAEoD,KAAK,CAACK,MAAR,kDAAE,cAAcC;EAHQ,CAAZ;AAAA,CAAD,CAAP,CAInB7D,MAJmB,CAAhB"},"metadata":{},"sourceType":"module"}
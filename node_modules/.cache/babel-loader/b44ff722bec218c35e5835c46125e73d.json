{"ast":null,"code":"var _jsxFileName = \"/Users/administrator/Desktop/like spotify/course-project/src/components/ListOfPlaylists.js\";\nimport \"../style/ListOfPlaylists.css\";\nimport React from \"react\";\nimport { store } from \"../redux/Store\";\nimport { connect } from \"react-redux\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport Typography from \"@mui/material/Typography\";\nimport { CardActionArea } from \"@mui/material\";\nimport { actionAllPlaylists } from \"../redux/actions/ActionAllPlaylists\";\nimport { actionTracksFromPlaylist } from \"../redux/actions/ActionTracksFromPlaylist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nstore.dispatch(actionAllPlaylists());\n\nconst ActionAreaCard = _ref => {\n  let {\n    playlist: {\n      _id,\n      name,\n      description\n    }\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Card, {\n    onClick: () => store.dispatch(actionTracksFromPlaylist(_id)),\n    children: /*#__PURE__*/_jsxDEV(CardActionArea, {\n      children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n        className: \"Playlist-item\",\n        component: \"img\",\n        image: \"https://img.freepik.com/free-vector/musical-notes-pattern-on-black-background_1017-32303.jpg?w=2000&t=st=1659974772~exp=1659975372~hmac=d023aca47a64bad02c6dcb61f7557f22e788632df6eae440ff32615068104cbe\",\n        alt: \"playlist-cover\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          gutterBottom: true,\n          variant: \"h5\",\n          component: \"div\",\n          children: !name ? \"no name\" : name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ActionAreaCard;\n\nconst ListOfPlaylists = _ref2 => {\n  let {\n    playlists = [],\n    status\n  } = _ref2;\n  return status === \"PENDING\" || !status ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"LOADING\"\n  }, void 0, false) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Playlists\",\n    children: playlists.map(playlist => /*#__PURE__*/_jsxDEV(ActionAreaCard, {\n      playlist: playlist\n    }, playlist._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = ListOfPlaylists;\nexport const CListOfPlaylists = connect(state => {\n  var _state$promise$allPla;\n\n  return {\n    playlists: state.promise.allPlaylists.payload,\n    status: (_state$promise$allPla = state.promise.allPlaylists) === null || _state$promise$allPla === void 0 ? void 0 : _state$promise$allPla.status\n  };\n})(ListOfPlaylists);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ActionAreaCard\");\n$RefreshReg$(_c2, \"ListOfPlaylists\");","map":{"version":3,"names":["React","store","connect","Card","CardContent","CardMedia","Typography","CardActionArea","actionAllPlaylists","actionTracksFromPlaylist","dispatch","ActionAreaCard","playlist","_id","name","description","ListOfPlaylists","playlists","status","map","CListOfPlaylists","state","promise","allPlaylists","payload"],"sources":["/Users/administrator/Desktop/like spotify/course-project/src/components/ListOfPlaylists.js"],"sourcesContent":["import \"../style/ListOfPlaylists.css\";\nimport React from \"react\";\nimport { store } from \"../redux/Store\";\nimport { connect } from \"react-redux\";\n\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport Typography from \"@mui/material/Typography\";\nimport { CardActionArea } from \"@mui/material\";\n\nimport { actionAllPlaylists } from \"../redux/actions/ActionAllPlaylists\";\nimport { actionTracksFromPlaylist } from \"../redux/actions/ActionTracksFromPlaylist\";\n\nstore.dispatch(actionAllPlaylists());\n\nconst ActionAreaCard = ({ playlist: { _id, name, description } }) => {\n  return (\n    <Card onClick={() => store.dispatch(actionTracksFromPlaylist(_id))}>\n      <CardActionArea>\n        <CardMedia\n          className=\"Playlist-item\"\n          component=\"img\"\n          image=\"https://img.freepik.com/free-vector/musical-notes-pattern-on-black-background_1017-32303.jpg?w=2000&t=st=1659974772~exp=1659975372~hmac=d023aca47a64bad02c6dcb61f7557f22e788632df6eae440ff32615068104cbe\"\n          alt=\"playlist-cover\"\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"div\">\n            {!name ? \"no name\" : name}\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            {description}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  );\n};\n\nconst ListOfPlaylists = ({ playlists = [], status }) =>\n  status === \"PENDING\" || !status ? (\n    <>LOADING</>\n  ) : (\n    <div className=\"Playlists\">\n      {playlists.map((playlist) => (\n        <ActionAreaCard playlist={playlist} key={playlist._id} />\n      ))}\n    </div>\n  );\nexport const CListOfPlaylists = connect((state) => ({\n  playlists: state.promise.allPlaylists.payload,\n  status: state.promise.allPlaylists?.status,\n}))(ListOfPlaylists);\n"],"mappings":";AAAA,OAAO,8BAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,cAAT,QAA+B,eAA/B;AAEA,SAASC,kBAAT,QAAmC,qCAAnC;AACA,SAASC,wBAAT,QAAyC,2CAAzC;;;AAEAR,KAAK,CAACS,QAAN,CAAeF,kBAAkB,EAAjC;;AAEA,MAAMG,cAAc,GAAG,QAA8C;EAAA,IAA7C;IAAEC,QAAQ,EAAE;MAAEC,GAAF;MAAOC,IAAP;MAAaC;IAAb;EAAZ,CAA6C;EACnE,oBACE,QAAC,IAAD;IAAM,OAAO,EAAE,MAAMd,KAAK,CAACS,QAAN,CAAeD,wBAAwB,CAACI,GAAD,CAAvC,CAArB;IAAA,uBACE,QAAC,cAAD;MAAA,wBACE,QAAC,SAAD;QACE,SAAS,EAAC,eADZ;QAEE,SAAS,EAAC,KAFZ;QAGE,KAAK,EAAC,0MAHR;QAIE,GAAG,EAAC;MAJN;QAAA;QAAA;QAAA;MAAA,QADF,eAOE,QAAC,WAAD;QAAA,wBACE,QAAC,UAAD;UAAY,YAAY,MAAxB;UAAyB,OAAO,EAAC,IAAjC;UAAsC,SAAS,EAAC,KAAhD;UAAA,UACG,CAACC,IAAD,GAAQ,SAAR,GAAoBA;QADvB;UAAA;UAAA;UAAA;QAAA,QADF,eAIE,QAAC,UAAD;UAAY,OAAO,EAAC,OAApB;UAA4B,KAAK,EAAC,gBAAlC;UAAA,UACGC;QADH;UAAA;UAAA;UAAA;QAAA,QAJF;MAAA;QAAA;QAAA;QAAA;MAAA,QAPF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAoBD,CArBD;;KAAMJ,c;;AAuBN,MAAMK,eAAe,GAAG;EAAA,IAAC;IAAEC,SAAS,GAAG,EAAd;IAAkBC;EAAlB,CAAD;EAAA,OACtBA,MAAM,KAAK,SAAX,IAAwB,CAACA,MAAzB,gBACE;IAAA;EAAA,iBADF,gBAGE;IAAK,SAAS,EAAC,WAAf;IAAA,UACGD,SAAS,CAACE,GAAV,CAAeP,QAAD,iBACb,QAAC,cAAD;MAAgB,QAAQ,EAAEA;IAA1B,GAAyCA,QAAQ,CAACC,GAAlD;MAAA;MAAA;MAAA;IAAA,QADD;EADH;IAAA;IAAA;IAAA;EAAA,QAJoB;AAAA,CAAxB;;MAAMG,e;AAUN,OAAO,MAAMI,gBAAgB,GAAGlB,OAAO,CAAEmB,KAAD;EAAA;;EAAA,OAAY;IAClDJ,SAAS,EAAEI,KAAK,CAACC,OAAN,CAAcC,YAAd,CAA2BC,OADY;IAElDN,MAAM,2BAAEG,KAAK,CAACC,OAAN,CAAcC,YAAhB,0DAAE,sBAA4BL;EAFc,CAAZ;AAAA,CAAD,CAAP,CAG5BF,eAH4B,CAAzB"},"metadata":{},"sourceType":"module"}